#ifndef CUSTOM_LIT_PASS_INCLUDED#define CUSTOM_LIT_PASS_INCLUDED#include "Packages/com.unity.render-pipelines.universal/ShaderLibrary/Unlit.hlsl"#include "Packages/com.unity.render-pipelines.universal/ShaderLibrary/Lighting.hlsl"struct Attributes{    float4 positionOS : POSITION;    float2 uv : TEXCOORD0;    float3 normalOS : NORMAL;    float4 tangentOS : TANGENT;    UNITY_VERTEX_INPUT_INSTANCE_ID};struct Varyings{    float2 uv : TEXCOORD0;    float fogCoord : TEXCOORD1;    float4 positionCS : SV_POSITION;    float3 positionWS : TEXCOORD2;    float3 normalWS : TEXCOORD3;    float3 viewDirWS : TEXCOORD4;    UNITY_VERTEX_INPUT_INSTANCE_ID    UNITY_VERTEX_OUTPUT_STEREO};void InitializeInputData(Varyings input, out InputData inputData){    inputData = (InputData)0;    inputData.positionWS = input.positionWS;    inputData.normalWS = input.normalWS;    inputData.viewDirectionWS = input.viewDirWS;    inputData.shadowCoord = 0;    inputData.fogCoord = 0;    inputData.vertexLighting = float3(0, 0, 0);    inputData.bakedGI = float3(0, 0, 0);    inputData.normalizedScreenSpaceUV = 0;    inputData.shadowMask = float4(1, 1, 1, 1);}Varyings LitPassVertex(Attributes input){    Varyings output = (Varyings)0;    UNITY_SETUP_INSTANCE_ID(input);    UNITY_TRANSFER_INSTANCE_ID(input, output);    UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(output);    VertexPositionInputs vertexInput = GetVertexPositionInputs(input.positionOS.xyz);    output.positionCS = vertexInput.positionCS;    output.uv = TRANSFORM_TEX(input.uv, _BaseMap);    #if defined(_FOG_FRAGMENT)    output.fogCoord = vertexInput.positionVS.z;    #else    output.fogCoord = ComputeFogFactor(vertexInput.positionCS.z);    #endif    // normalWS and tangentWS already normalize.    // this is required to avoid skewing the direction during interpolation    // also required for per-vertex lighting and SH evaluation    VertexNormalInputs normalInput = GetVertexNormalInputs(input.normalOS, input.tangentOS);    float3 viewDirWS = GetWorldSpaceViewDir(vertexInput.positionWS);    // already normalized from normal transform to WS.    output.positionWS = vertexInput.positionWS;    output.normalWS = normalInput.normalWS;    output.viewDirWS = viewDirWS;    return output;}float3 GetDiffuseColor(float3 normal, float3 surfaceColor){        const float3 lightDirection = normalize(GetMainLight().direction);    const float3 light = saturate(dot(normal, lightDirection)) * _MainLightColor;        float3 diffuse = light * surfaceColor;        int additionalLightCount = GetAdditionalLightsCount();    for (int i = 0; i < additionalLightCount; ++i)    {        float3 additionalLightDirection = _AdditionalLightsSpotDir[i];        float3 additionalLightColor = _AdditionalLightsColor[i];        float3 additionalLight =            saturate(dot(normal, additionalLightDirection)) * additionalLightColor;            diffuse += additionalLight * surfaceColor;    }        return diffuse;}float3 GetAmbientColor(float3 surfaceColor){    return saturate(surfaceColor - 0.7f);}float3 GetSpecularColor(float3 lightDirection, float3 normal, float3 viewDirection){    // const float3 reflectVector = reflect(-lightDirection, normal);    // float3 rDotV = saturate(dot(reflectVector, viewDirection));    // float3 specular = pow(rDotV, 10.0f) * _MainLightColor;    float3 halfVector = normalize(lightDirection + viewDirection);    float hDotN = saturate(dot(halfVector, normal));    float3 specular = pow(hDotN, 10) * _MainLightColor;        return specular;}float4 LitPassFragment(Varyings input) : SV_Target{    UNITY_SETUP_INSTANCE_ID(input);    UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(input);    float2 uv = input.uv;    float4 texColor = SAMPLE_TEXTURE2D(_BaseMap, sampler_BaseMap, uv);    float3 color = texColor.rgb * _BaseColor.rgb;    float alpha = texColor.a * _BaseColor.a;    const float3 normal = normalize(input.normalWS);    float3 diffuse = GetDiffuseColor(normal, color);    float3 ambient = GetAmbientColor(color);    const float3 lightDirection = normalize(GetMainLight().direction);    float3 specular = GetSpecularColor(lightDirection, normal, input.viewDirWS);    return float4(diffuse + specular + ambient, alpha);}#endif