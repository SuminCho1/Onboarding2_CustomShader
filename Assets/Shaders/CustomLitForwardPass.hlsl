#ifndef CUSTOM_LIT_PASS_INCLUDED#define CUSTOM_LIT_PASS_INCLUDED#include "Packages/com.unity.render-pipelines.universal/ShaderLibrary/Lighting.hlsl"#include "Assets/Shaders/Surface.hlsl"#include "Assets/Shaders/BRDF.hlsl"#include "Assets/Shaders/CustomGI.hlsl"#include "Assets/Shaders/CustomLight.hlsl"struct Attributes{    float4 positionOS : POSITION;    float2 uv : TEXCOORD0;    float3 normalOS : NORMAL;    float4 tangentOS : TANGENT;    GI_ATTRIBUTE_DATA    UNITY_VERTEX_INPUT_INSTANCE_ID};struct Varyings{    float4 positionCS : SV_POSITION;    float3 positionWS : TEXCOORD2;    float2 uv : TEXCOORD0;    float3 normalWS : TEXCOORD3;    float3 viewDirWS : TEXCOORD4;    GI_VARYINGS_DATA    UNITY_VERTEX_INPUT_INSTANCE_ID    UNITY_VERTEX_OUTPUT_STEREO};void InitializeInputData(Varyings input, out InputData inputData){    inputData = (InputData)0;    inputData.positionWS = input.positionWS;    inputData.normalWS = input.normalWS;    inputData.viewDirectionWS = input.viewDirWS;    inputData.shadowCoord = 0;    inputData.fogCoord = 0;    inputData.vertexLighting = float3(0, 0, 0);    inputData.bakedGI = float3(0, 0, 0);    inputData.normalizedScreenSpaceUV = 0;    inputData.shadowMask = float4(1, 1, 1, 1);}Varyings LitPassVertex(Attributes input){    Varyings output = (Varyings)0;    UNITY_SETUP_INSTANCE_ID(input);    UNITY_TRANSFER_INSTANCE_ID(input, output);    UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(output);    TRANSFER_GI_DATA(input, output);        VertexPositionInputs vertexInput = GetVertexPositionInputs(input.positionOS.xyz);    output.positionCS = vertexInput.positionCS;    output.uv = TRANSFORM_TEX(input.uv, _BaseMap);    VertexNormalInputs normalInput = GetVertexNormalInputs(input.normalOS, input.tangentOS);    float3 viewDirWS = GetWorldSpaceViewDir(vertexInput.positionWS);    // already normalized from normal transform to WS.    output.positionWS = vertexInput.positionWS;    output.normalWS = normalInput.normalWS;    output.viewDirWS = viewDirWS;    return output;}float4 LitPassFragment(Varyings input) : SV_Target{    UNITY_SETUP_INSTANCE_ID(input);    UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(input);    Surface surface;    float4 texColor = SAMPLE_TEXTURE2D(_BaseMap, sampler_BaseMap, input.uv);    surface.color = texColor.rgb * _BaseColor.rgb;    surface.alpha = texColor.a * _BaseColor.a;    surface.normal = normalize(input.normalWS);    surface.viewDirection = normalize(input.viewDirWS);    surface.metallic = UNITY_ACCESS_INSTANCED_PROP(UnityPerMaterial, _Metallic);    surface.smoothness = UNITY_ACCESS_INSTANCED_PROP(UnityPerMaterial, _Smoothness);    CustomGI gi = GetGI(GI_FRAGMENT_DATA(input), surface);    float3 color = GetLighting(surface, input.positionWS, GetBRDF(surface), gi);        return float4(color, surface.alpha);}#endif